{"id":"src/components/test5.js","dependencies":[{"name":"/Users/xfz/mywork/learn/yd/mvvm/react-st/hooks/.babelrc","includedInParent":true,"mtime":1554974548899},{"name":"/Users/xfz/mywork/learn/yd/mvvm/react-st/hooks/package.json","includedInParent":true,"mtime":1554974526694},{"name":"react","loc":{"line":41,"column":35},"parent":"/Users/xfz/mywork/learn/yd/mvvm/react-st/hooks/src/components/test5.js","resolved":"/Users/xfz/mywork/learn/yd/mvvm/react-st/hooks/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\n * useCallback\n *\n * 在类组件中，我们经常犯下面这样的错误\n * class App {\n    render() {\n      return <div>\n        <SomeComponent style={{ fontSize: 14 }} doSomething={ () => { console.log('do something') }} />\n      </div>\n    }\n  }\n  这样写有什么坏处呢？一旦 App 组件的 props 或者状态改变了就会触发重渲染，即使跟 SomeComponent 组件不相关，由于每次 render 都会产生新的 style 和 doSomething，所以会导致 SomeComponent 重新渲染，\n  倘若 SomeComponent 是一个大型的组件树，这样的 Virtual Dom 的比较显然是很浪费的，\n  解决的办法也很简单，将参数抽离成变量\n  const fontSizeStyle = { fontSize: 14 }\n  class App {\n    doSomething = () => {\n      console.log('do something');\n    }\n    render() {\n        return <div>\n            <SomeComponent style={fontSizeStyle} doSomething={ this.doSomething }  />\n        </div>;\n    }\n  }\n  \n  在类组件中，我们还可以通过 this 这个对象来存储函数，\n  而在函数组件中没办法进行挂载了。所以函数组件在每次渲染的时候如果有传递函数的话都会重渲染子组件\n\n  function App() {\n    const handleClick = () => {\n      console.log('Click happened')\n    }\n    return <SomeComponent onClick={handleClick}>Click Me</SomeComponent>\n  }\n\n  使用 useCallback(fn, array),数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染\n  这样只要子组件继承了 PureComponent 或者使用 React.memo 就可以有效避免不必要的 VDOM 渲染\n */\nfunction SomeComponent(_ref) {\n  var _onClick = _ref.onClick;\n  return _react.default.createElement(\"div\", {\n    onClick: function onClick() {\n      return _onClick();\n    }\n  }, \"click me\");\n}\n\nvar _default = function _default() {\n  var memoizedHandleClick = (0, _react.useCallback)(function () {\n    console.log('Click happened');\n  }, []); // 空数组代表无论什么情况下该函数都不会发生改变\n\n  return _react.default.createElement(SomeComponent, {\n    onClick: memoizedHandleClick\n  }, \"Click Me\");\n};\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"src/components/test5.js","original":{"line":41,"column":0}},{"generated":{"line":12,"column":0},"source":"src/components/test5.js","original":{"line":1,"column":0}},{"generated":{"line":51,"column":0},"source":"src/components/test5.js","original":{"line":43,"column":0}},{"name":"SomeComponent","generated":{"line":51,"column":9},"source":"src/components/test5.js","original":{"line":43,"column":9}},{"generated":{"line":51,"column":22},"source":"src/components/test5.js","original":{"line":43,"column":0}},{"generated":{"line":51,"column":29},"source":"src/components/test5.js","original":{"line":43,"column":36}},{"generated":{"line":52,"column":0},"source":"src/components/test5.js","original":{"line":43,"column":36}},{"name":"onClick","generated":{"line":52,"column":6},"source":"src/components/test5.js","original":{"line":43,"column":25}},{"generated":{"line":52,"column":14},"source":"src/components/test5.js","original":{"line":43,"column":36}},{"name":"onClick","generated":{"line":52,"column":22},"source":"src/components/test5.js","original":{"line":43,"column":25}},{"generated":{"line":52,"column":29},"source":"src/components/test5.js","original":{"line":43,"column":36}},{"generated":{"line":53,"column":0},"source":"src/components/test5.js","original":{"line":44,"column":2}},{"generated":{"line":53,"column":9},"source":"src/components/test5.js","original":{"line":45,"column":4}},{"generated":{"line":54,"column":0},"source":"src/components/test5.js","original":{"line":45,"column":9}},{"generated":{"line":54,"column":4},"source":"src/components/test5.js","original":{"line":45,"column":9}},{"generated":{"line":54,"column":11},"source":"src/components/test5.js","original":{"line":45,"column":16}},{"generated":{"line":54,"column":13},"source":"src/components/test5.js","original":{"line":45,"column":18}},{"generated":{"line":55,"column":0},"source":"src/components/test5.js","original":{"line":45,"column":18}},{"name":"onClick","generated":{"line":55,"column":13},"source":"src/components/test5.js","original":{"line":45,"column":24}},{"generated":{"line":55,"column":21},"source":"src/components/test5.js","original":{"line":45,"column":31}},{"generated":{"line":55,"column":23},"source":"src/components/test5.js","original":{"line":45,"column":18}},{"generated":{"line":56,"column":0},"source":"src/components/test5.js","original":{"line":45,"column":18}},{"generated":{"line":57,"column":0},"source":"src/components/test5.js","original":{"line":45,"column":4}},{"generated":{"line":57,"column":16},"source":"src/components/test5.js","original":{"line":44,"column":2}},{"generated":{"line":58,"column":0},"source":"src/components/test5.js","original":{"line":49,"column":1}},{"generated":{"line":60,"column":15},"source":"src/components/test5.js","original":{"line":51,"column":15}},{"generated":{"line":60,"column":35},"source":"src/components/test5.js","original":{"line":51,"column":21}},{"generated":{"line":61,"column":0},"source":"src/components/test5.js","original":{"line":52,"column":2}},{"name":"memoizedHandleClick","generated":{"line":61,"column":6},"source":"src/components/test5.js","original":{"line":52,"column":8}},{"generated":{"line":61,"column":25},"source":"src/components/test5.js","original":{"line":52,"column":27}},{"generated":{"line":61,"column":28},"source":"src/components/test5.js","original":{"line":52,"column":30}},{"generated":{"line":61,"column":52},"source":"src/components/test5.js","original":{"line":52,"column":42}},{"generated":{"line":61,"column":64},"source":"src/components/test5.js","original":{"line":52,"column":48}},{"name":"console","generated":{"line":62,"column":0},"source":"src/components/test5.js","original":{"line":53,"column":4}},{"name":"console","generated":{"line":62,"column":4},"source":"src/components/test5.js","original":{"line":53,"column":4}},{"generated":{"line":62,"column":11},"source":"src/components/test5.js","original":{"line":53,"column":11}},{"name":"log","generated":{"line":62,"column":12},"source":"src/components/test5.js","original":{"line":53,"column":12}},{"generated":{"line":62,"column":15},"source":"src/components/test5.js","original":{"line":53,"column":4}},{"generated":{"line":62,"column":16},"source":"src/components/test5.js","original":{"line":53,"column":16}},{"generated":{"line":62,"column":32},"source":"src/components/test5.js","original":{"line":53,"column":4}},{"generated":{"line":63,"column":0},"source":"src/components/test5.js","original":{"line":54,"column":3}},{"generated":{"line":63,"column":3},"source":"src/components/test5.js","original":{"line":52,"column":30}},{"generated":{"line":63,"column":5},"source":"src/components/test5.js","original":{"line":54,"column":5}},{"generated":{"line":63,"column":7},"source":"src/components/test5.js","original":{"line":52,"column":30}},{"generated":{"line":63,"column":8},"source":"src/components/test5.js","original":{"line":52,"column":2}},{"generated":{"line":63,"column":9},"source":"src/components/test5.js","original":{"line":51,"column":21}},{"generated":{"line":63,"column":10},"source":"src/components/test5.js","original":{"line":54,"column":10}},{"generated":{"line":65,"column":0},"source":"src/components/test5.js","original":{"line":56,"column":2}},{"generated":{"line":65,"column":9},"source":"src/components/test5.js","original":{"line":56,"column":9}},{"generated":{"line":65,"column":38},"source":"src/components/test5.js","original":{"line":56,"column":10}},{"generated":{"line":65,"column":51},"source":"src/components/test5.js","original":{"line":56,"column":9}},{"generated":{"line":66,"column":0},"source":"src/components/test5.js","original":{"line":56,"column":24}},{"generated":{"line":66,"column":4},"source":"src/components/test5.js","original":{"line":56,"column":24}},{"generated":{"line":66,"column":11},"source":"src/components/test5.js","original":{"line":56,"column":31}},{"name":"memoizedHandleClick","generated":{"line":66,"column":13},"source":"src/components/test5.js","original":{"line":56,"column":33}},{"generated":{"line":67,"column":0},"source":"src/components/test5.js","original":{"line":56,"column":9}},{"generated":{"line":67,"column":16},"source":"src/components/test5.js","original":{"line":56,"column":2}},{"generated":{"line":68,"column":0},"source":"src/components/test5.js","original":{"line":57,"column":1}}],"sources":{"src/components/test5.js":"/**\n * useCallback\n *\n * 在类组件中，我们经常犯下面这样的错误\n * class App {\n    render() {\n      return <div>\n        <SomeComponent style={{ fontSize: 14 }} doSomething={ () => { console.log('do something') }} />\n      </div>\n    }\n  }\n  这样写有什么坏处呢？一旦 App 组件的 props 或者状态改变了就会触发重渲染，即使跟 SomeComponent 组件不相关，由于每次 render 都会产生新的 style 和 doSomething，所以会导致 SomeComponent 重新渲染，\n  倘若 SomeComponent 是一个大型的组件树，这样的 Virtual Dom 的比较显然是很浪费的，\n  解决的办法也很简单，将参数抽离成变量\n  const fontSizeStyle = { fontSize: 14 }\n  class App {\n    doSomething = () => {\n      console.log('do something');\n    }\n    render() {\n        return <div>\n            <SomeComponent style={fontSizeStyle} doSomething={ this.doSomething }  />\n        </div>;\n    }\n  }\n  \n  在类组件中，我们还可以通过 this 这个对象来存储函数，\n  而在函数组件中没办法进行挂载了。所以函数组件在每次渲染的时候如果有传递函数的话都会重渲染子组件\n\n  function App() {\n    const handleClick = () => {\n      console.log('Click happened')\n    }\n    return <SomeComponent onClick={handleClick}>Click Me</SomeComponent>\n  }\n\n  使用 useCallback(fn, array),数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染\n  这样只要子组件继承了 PureComponent 或者使用 React.memo 就可以有效避免不必要的 VDOM 渲染\n */\n\nimport React, { useCallback } from 'react'\n\nfunction SomeComponent({ onClick }) {\n  return (\n    <div onClick={() => onClick()}>\n      click me\n    </div>\n  )\n}\n\nexport default () => {\n  const memoizedHandleClick = useCallback(() => {\n    console.log('Click happened')\n  }, []); // 空数组代表无论什么情况下该函数都不会发生改变\n  \n  return <SomeComponent onClick={memoizedHandleClick}>Click Me</SomeComponent>;\n}\n"},"lineCount":null}},"error":null,"hash":"2ad445801027f44266ef1d118f656ded","cacheData":{"env":{}}}